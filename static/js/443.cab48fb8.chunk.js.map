{"version":3,"file":"static/js/443.cab48fb8.chunk.js","mappings":"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","sources":["components/Projects.js","../node_modules/@chakra-ui/layout/src/container.tsx","../node_modules/@chakra-ui/layout/src/heading.tsx","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/layout/src/simple-grid.tsx","../node_modules/@chakra-ui/layout/src/stack/v-stack.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  Container,\n  Heading,\n  SimpleGrid,\n  Text,\n  Link,\n  Image,\n  VStack,\n  Button,\n  useColorModeValue,\n  Stack,\n} from '@chakra-ui/react';\nimport { motion } from 'framer-motion';\n\nconst projects = [\n  {\n    name: 'Passion8',\n    link: 'https://github.com/koolkiz/Passion8',\n    description: 'A data-driven framework leveraging AI and data analysis to optimize e-commerce operations. \\n Churn analysis, Forecasting, Computer Vision, Sentiment Analysis, and more.',\n    hoverColor: 'rgba(56, 142, 60, 0.1)',\n  },\n  {\n    name: 'Quora Question Pairs',\n    link: 'https://github.com/koolkiz/CS3244_Quora',\n    description: 'A machine learning project to predict if 2 questions are similary or not through natural language processing',\n    hoverColor: 'rgba(56, 142, 60, 0.1)',\n  }\n];\n\nconst Projects = () => {\n  const bgColor = useColorModeValue('#edf2f7', '#1a202c');\n  const cardBgColor = useColorModeValue('#ffffff', '#2d3748');\n  const textColor = useColorModeValue('gray.800', 'gray.200');\n  const buttonBgColor = useColorModeValue('#3182ce', '#63b3ed');\n  const buttonHoverBgColor = useColorModeValue('#2b6cb0', '#4299e1');\n  const linkColor = useColorModeValue('#2c5282', '#90cdf4');\n  const borderColor = useColorModeValue('gray.200', 'gray.700');\n\n  return (\n    <Box as=\"section\" bg={bgColor} color={textColor} id=\"projects\" py={20}>  {/* Added id=\"projects\" */}\n      <Container maxW=\"container.xl\">\n        <Heading as=\"h2\" size=\"xl\" mb={16} fontWeight=\"bold\" color={linkColor} textAlign=\"center\">\n          Projects ðŸš€\n        </Heading>\n        <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={10}>\n          {projects.map((project, index) => (\n            <motion.div\n              key={index}\n              whileHover={{ scale: 1.05, rotate: 0.5 }}\n              transition={{ type: \"spring\", stiffness: 300, damping: 20 }}\n            >\n              <Box\n                bg={cardBgColor}\n                width=\"330px\" // Set a fixed width\n                height=\"500px\" // Set a fixed height\n                borderRadius=\"xl\"\n                boxShadow=\"2xl\"\n                overflow=\"hidden\"\n                border={`1px solid ${borderColor}`}\n                transition=\"background-color 0.3s ease-in-out, transform 0.3s ease-in-out\"\n                position=\"relative\"\n                _before={{\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  left: 0,\n                  right: 0,\n                  bottom: 0,\n                  bg: project.hoverColor,\n                  zIndex: 0,\n                  transition: 'opacity 0.3s ease-in-out',\n                  opacity: 0,\n                }}\n                _hover={{\n                  bg: project.hoverColor,\n                  boxShadow: \"xl\",\n                  transform: \"scale(1.05)\",\n                  _before: {\n                    opacity: 1,\n                  },\n                }}\n              >\n                <VStack align=\"stretch\" spacing={5} p={6} position=\"relative\" zIndex={1}>\n                  <Box\n                    overflow=\"hidden\"\n                    borderRadius=\"lg\"\n                    height=\"200px\"\n                  >\n                    <Image\n                      src={`${process.env.PUBLIC_URL}/assets/${project.name.toLowerCase().replace(/\\s+/g, '-')}.png`}\n                      alt={project.name}\n                      borderRadius=\"lg\"\n                      objectFit=\"cover\"\n                      width=\"100%\"\n                      height=\"100%\"\n                    />\n                  </Box>\n                  <Box flex=\"1\" textAlign=\"center\">\n                    <Heading as=\"h3\" size=\"md\" color={linkColor} mb={3}>\n                      {project.name}\n                    </Heading>\n                    <Text fontSize=\"sm\" color={textColor} >\n                      {project.description}\n                    </Text>\n                  </Box>\n                  <Stack\n                    direction={{ base: 'column', sm: 'row' }}\n                    spacing={3}\n                    mt={4}\n                    width=\"100%\"\n                    justifyContent=\"center\"\n                  >\n                    <Button\n                      as={Link}\n                      href={project.link}\n                      isExternal\n                      bg={buttonBgColor}\n                      color=\"white\"\n                      flex={{ base: '1', sm: 'auto' }}\n                      _hover={{ bg: buttonHoverBgColor }}\n                      size=\"md\"\n                      borderRadius=\"full\"\n                      py={4}\n                      textDecoration=\"none\"\n                    >\n                      View Project\n                    </Button>\n                  </Stack>\n                </VStack>\n              </Box>\n            </motion.div>\n          ))}\n        </SimpleGrid>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Projects;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface ContainerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Container\"> {\n  /**\n   * If `true`, container will center its children\n   * regardless of their width.\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n *\n * @see Docs https://chakra-ui.com/docs/components/container\n */\nexport const Container = forwardRef<ContainerProps, \"div\">(function Container(\n  props,\n  ref,\n) {\n  const { className, centerContent, ...rest } = omitThemingProps(props)\n\n  const styles = useStyleConfig(\"Container\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={{\n        ...styles,\n        ...(centerContent && {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }),\n      }}\n    />\n  )\n})\n\nContainer.displayName = \"Container\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import { forwardRef } from \"@chakra-ui/system\"\n\nimport { Stack, StackProps } from \"./stack\"\n\n/**\n * A view that arranges its children in a vertical line.\n *\n * @see Docs https://chakra-ui.com/docs/components/stack\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nVStack.displayName = \"VStack\"\n"],"names":["projects","name","link","description","hoverColor","Projects","bgColor","useColorModeValue","cardBgColor","textColor","buttonBgColor","buttonHoverBgColor","linkColor","borderColor","_jsxs","Box","as","bg","color","id","py","children","Container","maxW","_jsx","Heading","size","mb","fontWeight","textAlign","SimpleGrid","columns","base","md","lg","spacing","map","project","index","motion","div","whileHover","scale","rotate","transition","type","stiffness","damping","width","height","borderRadius","boxShadow","overflow","border","concat","position","_before","content","top","left","right","bottom","zIndex","opacity","_hover","transform","VStack","align","p","Image","src","process","toLowerCase","replace","alt","objectFit","flex","Text","fontSize","Stack","direction","sm","mt","justifyContent","Button","Link","href","isExternal","textDecoration","forwardRef","props","ref","className","centerContent","rest","omitThemingProps","styles","useStyleConfig","jsx","chakra","cx","__css","display","flexDirection","alignItems","displayName","h2","Grid","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","spacingX","spacingY","minChildWidth","theme","useTheme","mapResponsive","value","_value","getToken","n","widthToColumns","count"],"sourceRoot":""}