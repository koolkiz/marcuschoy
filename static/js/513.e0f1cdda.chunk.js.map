{"version":3,"file":"static/js/513.e0f1cdda.chunk.js","mappings":"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","sources":["components/Experience.js","../node_modules/@chakra-ui/layout/src/container.tsx","../node_modules/@chakra-ui/layout/src/wrap.tsx","../node_modules/@chakra-ui/layout/src/heading.tsx","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/layout/src/simple-grid.tsx","../node_modules/@chakra-ui/tag/src/tag.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  Container,\n  Heading,\n  SimpleGrid,\n  Flex,\n  Text,\n  Image,\n  Progress,\n  Tag,\n  Wrap,\n  WrapItem,\n  useColorModeValue,\n  Link,\n  List,\n  ListItem,\n  ListIcon\n} from '@chakra-ui/react';\nimport { motion } from 'framer-motion';\n\nconst Experience = () => {\n  const sectionBg = useColorModeValue(\n    'linear-gradient(135deg, #F7FAFC 0%, #E3F2FD 100%)',\n    'linear-gradient(135deg, #1A202C 0%, #2D3748 100%)'\n  );\n  const sectionColor = useColorModeValue('#2D3748', '#E2E8F0');\n  const cardBg = useColorModeValue('#FFFFFF', '#2D3748');\n  const headingColor = useColorModeValue('#2B6CB0', '#FFD700');\n  const textColor = useColorModeValue('#2D3748', '#E2E8F0');\n  const secondaryTextColor = useColorModeValue('#718096', '#A0AEC0');\n  const tagHoverColor = useColorModeValue('teal.600', 'teal.300');\n\n  const experiences = [\n    {\n      logo: `${process.env.PUBLIC_URL}/assets/SAP.png`,\n      date: 'Jan 2024 – Aug 2024',\n      company: 'SAP',\n      // hoverColor: 'rgba(33, 150, 243, 0.15)',\n      // location: 'Canberra, Australia',\n      title: 'AI Engineer Intern',\n      description: [\n        'Design and implemented features for a Retrieval-Augmented Generation (RAG) use cases, such as chat history, intent detection, and prompt engineering, to enhance productivity for users',\n        'Designed and implemented a CI/CD pipeline using Jenkins, enabling automated testing, integration, and deployment for backend services',\n        'Build and deployed Dockerised applications onto Cloud Floundry on SAP Business Technology Platform',\n        'Communicated directly to understand business needs and managing business stakeholders’ expectations',\n        'Explore Agents and Knowledge graph for RAG use case'\n      ],\n      tags: ['Python', 'LangChain', 'Docker', 'Jenkins' ,'SAP BTP', 'SAP HANA CLOUD'],\n      // progress: 90,\n      // learning: 'Gained deep insights into data automation and sports analytics using Python, R and PowerBI.'\n    },\n    {\n      logo: `${process.env.PUBLIC_URL}/assets/Synapxe.jpg`,\n      date: 'August 2024 – Present',\n      company: 'Synaxpe',\n      // link: 'https://www.shoesandsox.com.au',\n      // hoverColor: 'rgba(255, 165, 0, 0.15)',\n      // location: 'Sydney, Australia',\n      title: 'AI Developer Intern',\n      description: [\n        'Developed new Generative AI features/tools to be deployed onto Generative AI Platform to boost users productivity',\n      ],\n      tags: ['Python', 'LangChain', 'Azure AI'],\n      // progress: 90,\n      // learning: 'Learned how data-driven decisions impact sales and efficiency.'\n    },\n    {\n      logo: `${process.env.PUBLIC_URL}/assets/ML.jpg`,\n      date: 'Feb 2021 – June 2021',\n      company: 'ML Research Consultants',\n      // hoverColor: 'rgba(33, 150, 243, 0.15)',\n      // location: 'Canberra, Australia',\n      title: 'Research Assistant',\n      description: [\n        'Analysed and cleaned data obtained from survey fieldworks for a senior researcher',\n        'Worked on large amount of data using computing applications namely Excel and SPSS'\n      ],\n      tags: ['Excel', 'SPSS'],\n      // progress: 90,\n      // learning: 'Gained deep insights into data automation and sports analytics using Python, R and PowerBI.'\n    }\n  ];\n\n  return (\n    <Box as=\"section\" bg={sectionBg} color={sectionColor} py={20} px={4} id=\"experience\" position=\"relative\">\n      <Container maxW=\"container.xl\">\n        <Heading\n          as=\"h2\"\n          size=\"xl\"\n          mb={12}\n          color={headingColor}\n          textAlign=\"center\"\n          fontFamily=\"Poppins, sans-serif\"\n          fontWeight=\"extrabold\"\n          letterSpacing=\"wide\"\n        >\n          Experience 👨‍💻\n        </Heading>\n        <SimpleGrid columns={{ base: 1, md: 2 }} spacing={10}>\n          {experiences.map((experience, index) => (\n            // <motion.div\n            //   key={index}\n            //   whileHover={{ translateY: -10 }}\n            //   transition={{ duration: 0.3 }}\n            // >\n              <Box\n                bg={cardBg}\n                color={textColor}\n                p={8}\n                borderRadius=\"lg\"\n                boxShadow=\"2xl\"\n                position=\"relative\"\n                _before={{\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  left: 0,\n                  right: 0,\n                  bottom: 0,\n                  bg: experience.hoverColor,\n                  zIndex: 0,\n                  transition: 'opacity 0.3s ease-in-out',\n                  opacity: 0,\n                }}\n                // _hover={{\n                //   _before: {\n                //     opacity: 1,\n                //   },\n                //   boxShadow: '0px 20px 30px rgba(0, 0, 0, 0.2)',\n                //   transform: 'translateY(-10px)',\n                // }}\n                transition=\"background-color 0.3s ease, transform 0.3s ease\"\n                h=\"100%\"\n                display=\"flex\"\n                flexDirection=\"column\"\n                justifyContent=\"start\"\n              >\n                <Flex align=\"center\" mb={4} zIndex={1} position=\"relative\">\n                  <Image\n                    src={experience.logo}\n                    alt={experience.company}\n                    // borderRadius=\"full\"\n                    boxSize={{ base: \"180px\", md: \"190px\" }}\n                    mr={4}\n                    objectFit=\"contain\"\n                  />\n                  <Box textAlign=\"left\">\n                    <Link href={experience.link} isExternal fontWeight=\"bold\" fontSize={{ base: \"md\", md: \"lg\" }} color={headingColor} _hover={{ textDecoration: 'underline' }}>\n                      {experience.company}\n                    </Link>\n                    <Text fontSize={{ base: \"sm\", md: \"md\" }} color={secondaryTextColor} fontStyle=\"italic\">\n                      {experience.location}\n                    </Text>\n                    <Text fontSize={{ base: \"sm\", md: \"md\" }} color={secondaryTextColor}>\n                      {experience.date}\n                    </Text>\n                  </Box>\n                </Flex>\n                <Box textAlign=\"center\" mb={4} zIndex={1} position=\"relative\">\n                  <Text\n                    fontWeight=\"bold\"\n                    fontSize={{ base: \"lg\", md: \"xl\" }}\n                    color={headingColor}\n                    fontFamily=\"Poppins, sans-serif\"\n                    letterSpacing=\"wider\"\n                  >\n                    {experience.title}\n                  </Text>\n                </Box>\n                <Box as=\"ul\" pl={4} mt={4} color={textColor} textAlign=\"left\" zIndex={1} position=\"relative\">\n                  {experience.description.map((desc, i) => (\n                    <Text as=\"li\" mb={3} key={i} display=\"flex\" alignItems=\"start\" fontSize=\"sm\">\n                      <Box as=\"span\" color={headingColor} mr={2}>•</Box> {desc}\n                    </Text>\n                  ))}\n                </Box>\n                <Wrap mt={4} spacing={2} justify=\"center\">\n                  {experience.tags.map((tag, i) => (\n                    <WrapItem key={i}>\n                      <Tag\n                        size=\"md\"\n                        variant=\"solid\"\n                        colorScheme=\"blue\"\n                        borderRadius=\"full\"\n                        cursor=\"pointer\"\n                        // _hover={{ transform: \"scale(1.2)\", backgroundColor: tagHoverColor }}\n                        transition=\"all 0.3s ease-in-out\"\n                      >\n                        {tag}\n                      </Tag>\n                    </WrapItem>\n                  ))}\n                </Wrap>\n                {/* <Box mt={4}>\n                  <Text fontSize=\"sm\" fontWeight=\"bold\" color={headingColor}>\n                    Impact & Performance:\n                  </Text>\n                  <Progress colorScheme=\"teal\" size=\"sm\" value={experience.progress} mt={2} borderRadius=\"md\" />\n                </Box>\n                <Box mt={4}>\n                  <Text fontSize=\"sm\" fontWeight=\"bold\" color={headingColor}>\n                    Key Learning:\n                  </Text>\n                  <Text fontSize=\"sm\" mt={2} color={secondaryTextColor}>\n                    {experience.learning}\n                  </Text>\n                </Box> */}\n              </Box>\n            // </motion.div>\n          ))}\n        </SimpleGrid>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Experience;","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface ContainerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Container\"> {\n  /**\n   * If `true`, container will center its children\n   * regardless of their width.\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n *\n * @see Docs https://chakra-ui.com/docs/components/container\n */\nexport const Container = forwardRef<ContainerProps, \"div\">(function Container(\n  props,\n  ref,\n) {\n  const { className, centerContent, ...rest } = omitThemingProps(props)\n\n  const styles = useStyleConfig(\"Container\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={{\n        ...styles,\n        ...(centerContent && {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }),\n      }}\n    />\n  )\n})\n\nContainer.displayName = \"Container\"\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { Children, useMemo } from \"react\"\n\nexport interface WrapProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The space between each child (even if it wraps)\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The horizontal space between the each child (even if it wraps). Defaults to `spacing` if not defined.\n   * @type SystemProps[\"margin\"]\n   */\n  spacingX?: SystemProps[\"margin\"]\n  /**\n   * The vertical space between the each child (even if it wraps). Defaults to `spacing` if not defined.\n   * @type SystemProps[\"margin\"]\n   */\n  spacingY?: SystemProps[\"margin\"]\n  /**\n   * The `justify-content` value (for cross-axis alignment)\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * The `align-items` value (for main axis alignment)\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The `flex-direction` value\n   * @type SystemProps[\"flexDirection\"]\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * If `true`, the children will be wrapped in a `WrapItem`\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n}\n\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/wrap\n */\nexport const Wrap = forwardRef<WrapProps, \"div\">(function Wrap(props, ref) {\n  const {\n    spacing = \"0.5rem\",\n    spacingX,\n    spacingY,\n    children,\n    justify,\n    direction,\n    align,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const _children = useMemo(\n    () =>\n      shouldWrapChildren\n        ? Children.map(children, (child, index) => (\n            <WrapItem key={index}>{child}</WrapItem>\n          ))\n        : children,\n    [children, shouldWrapChildren],\n  )\n\n  return (\n    <chakra.div ref={ref} className={cx(\"chakra-wrap\", className)} {...rest}>\n      <chakra.ul\n        className=\"chakra-wrap__list\"\n        __css={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: justify,\n          alignItems: align,\n          flexDirection: direction,\n          listStyleType: \"none\",\n          gap: spacing,\n          columnGap: spacingX,\n          rowGap: spacingY,\n          padding: \"0\",\n        }}\n      >\n        {_children}\n      </chakra.ul>\n    </chakra.div>\n  )\n})\n\nWrap.displayName = \"Wrap\"\n\nexport interface WrapItemProps extends HTMLChakraProps<\"li\"> {}\n\nexport const WrapItem = forwardRef<WrapItemProps, \"li\">(function WrapItem(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  return (\n    <chakra.li\n      ref={ref}\n      __css={{ display: \"flex\", alignItems: \"flex-start\" }}\n      className={cx(\"chakra-wrap__listitem\", className)}\n      {...rest}\n    />\n  )\n})\n\nWrapItem.displayName = \"WrapItem\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\n\nconst [TagStylesProvider, useTagStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `TagStylesContext`,\n  errorMessage: `useTagStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Tag />\" `,\n})\n\nexport { useTagStyles }\n\nexport interface TagProps\n  extends HTMLChakraProps<\"span\">,\n    ThemingProps<\"Tag\"> {}\n\n/**\n * The tag component is used to label or categorize UI elements.\n * To style the tag globally, change the styles in `theme.components.Tag`\n * @see Docs https://chakra-ui.com/tag\n */\nexport const Tag = forwardRef<TagProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Tag\", props)\n  const ownProps = omitThemingProps(props)\n\n  const containerStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n    verticalAlign: \"top\",\n    alignItems: \"center\",\n    maxWidth: \"100%\",\n    ...styles.container,\n  }\n\n  return (\n    <TagStylesProvider value={styles}>\n      <chakra.span ref={ref} {...ownProps} __css={containerStyles} />\n    </TagStylesProvider>\n  )\n})\n\nTag.displayName = \"Tag\"\n\nexport interface TagLabelProps extends HTMLChakraProps<\"span\"> {}\n\nexport const TagLabel = forwardRef<TagLabelProps, \"span\">((props, ref) => {\n  const styles = useTagStyles()\n  return <chakra.span ref={ref} noOfLines={1} {...props} __css={styles.label} />\n})\n\nTagLabel.displayName = \"TagLabel\"\n\nexport const TagLeftIcon = forwardRef<IconProps, \"svg\">((props, ref) => (\n  <Icon ref={ref} verticalAlign=\"top\" marginEnd=\"0.5rem\" {...props} />\n))\n\nTagLeftIcon.displayName = \"TagLeftIcon\"\n\nexport const TagRightIcon = forwardRef<IconProps, \"svg\">((props, ref) => (\n  <Icon ref={ref} verticalAlign=\"top\" marginStart=\"0.5rem\" {...props} />\n))\n\nTagRightIcon.displayName = \"TagRightIcon\"\n\nconst TagCloseIcon: React.FC<IconProps> = (props) => (\n  <Icon verticalAlign=\"inherit\" viewBox=\"0 0 512 512\" {...props}>\n    <path\n      fill=\"currentColor\"\n      d=\"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"\n    />\n  </Icon>\n)\n\nTagCloseIcon.displayName = \"TagCloseIcon\"\n\nexport interface TagCloseButtonProps\n  extends Omit<HTMLChakraProps<\"button\">, \"disabled\"> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\n/**\n * TagCloseButton is used to close \"remove\" the tag\n * @see Docs https://chakra-ui.com/tag\n */\nexport const TagCloseButton = forwardRef<TagCloseButtonProps, \"button\">(\n  (props, ref) => {\n    const { isDisabled, children, ...rest } = props\n\n    const styles = useTagStyles()\n\n    const btnStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      outline: \"0\",\n      ...styles.closeButton,\n    }\n\n    return (\n      <chakra.button\n        ref={ref}\n        aria-label=\"close\"\n        {...rest}\n        type=\"button\"\n        disabled={isDisabled}\n        __css={btnStyles}\n      >\n        {children || <TagCloseIcon />}\n      </chakra.button>\n    )\n  },\n)\n\nTagCloseButton.displayName = \"TagCloseButton\"\n"],"names":["Experience","sectionBg","useColorModeValue","sectionColor","cardBg","headingColor","textColor","secondaryTextColor","experiences","logo","concat","process","date","company","title","description","tags","_jsx","Box","as","bg","color","py","px","id","position","children","_jsxs","Container","maxW","Heading","size","mb","textAlign","fontFamily","fontWeight","letterSpacing","SimpleGrid","columns","base","md","spacing","map","experience","index","p","borderRadius","boxShadow","_before","content","top","left","right","bottom","hoverColor","zIndex","transition","opacity","h","display","flexDirection","justifyContent","Flex","align","Image","src","alt","boxSize","mr","objectFit","Link","href","link","isExternal","fontSize","_hover","textDecoration","Text","fontStyle","location","pl","mt","desc","i","alignItems","Wrap","justify","tag","WrapItem","Tag","variant","colorScheme","cursor","forwardRef","props","ref","className","centerContent","rest","omitThemingProps","styles","useStyleConfig","jsx","chakra","div","cx","__css","displayName","spacingX","spacingY","direction","shouldWrapChildren","_children","useMemo","Children","child","ul","flexWrap","listStyleType","gap","columnGap","rowGap","padding","li","h2","Grid","templateAreas","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","minChildWidth","theme","useTheme","width","mapResponsive","value","_value","getToken","n","widthToColumns","count","TagStylesProvider","useTagStyles","createContext","name","errorMessage","useMultiStyleConfig","ownProps","containerStyles","verticalAlign","maxWidth","container","span","noOfLines","label","Icon","marginEnd","marginStart","TagCloseIcon","viewBox","fill","d","isDisabled","btnStyles","outline","closeButton","button","type","disabled"],"sourceRoot":""}